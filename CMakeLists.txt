cmake_minimum_required(VERSION 2.6)

project(LuaGE)

option(target "target")
option(static "static")
option(ARCH "ARCH")

if(${target} MATCHES OFF)
	if(WIN32)
		set(target win)
		add_definitions(-DPLATFORM_win -DLIBGE_STATIC)
	elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
		set(target mac)
	elseif(UNIX)
		set(target linux)
	endif()
endif()


if("${target}" MATCHES "ios")
	set(video "ios")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -D__IPHONE_OS_VERSION_MIN_REQUIRED=030103 -DPLATFORM_ios")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -D__IPHONE_OS_VERSION_MIN_REQUIRED=030103 -DPLATFORM_ios")
	set(CMAKE_C_FLAGS "-fobjc-abi-version=2 -fobjc-arc -nostdinc -I${CMAKE_IOS_SDK_ROOT}/usr/include ${CMAKE_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "-fobjc-abi-version=2 -fobjc-arc -nostdinc -I${CMAKE_IOS_SDK_ROOT}/usr/include ${CMAKE_CXX_FLAGS}")
	include_directories(~/usr/share/ios/include)
elseif("${target}" MATCHES "win*")
	if(${ARCH} MATCHES OFF)
		message(WARNING "Architecture defaulted to Windows 32bits")
		set(ARCH 32)
		set(CMAKE_C_COMPILER i686-pc-mingw32-gcc.exe)
		set(CMAKE_CXX_COMPILER i686-pc-mingw32-g++.exe)
	endif()
	add_definitions(-DPLATFORM_win -DLIBGE_STATIC)
elseif("${target}" MATCHES "mac*")
	if(${ARCH} MATCHES OFF)
		execute_process(COMMAND getconf LONG_BIT OUTPUT_VARIABLE ARCH)
	endif()
	add_definitions(-DPLATFORM_mac -DLIBGE_STATIC)
elseif("${target}" MATCHES "linux*")
	if(${ARCH} MATCHES OFF)
		execute_process(COMMAND getconf LONG_BIT OUTPUT_VARIABLE ARCH)
	endif()
	add_definitions(-DPLATFORM_linux -DLIBGE_STATIC)
endif()

if("${ARCH}" MATCHES "64")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -m64 -g3")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c99 -m64 -g3")
	set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -std=c99 -m64 -g3")
	set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -std=c99 -m64 -g3")
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -m32 -g3")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c99 -m32 -g3")
	set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -std=c99 -m32 -g3")
	set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -std=c99 -m32 -g3")
endif()


add_custom_target(txt2c COMMAND gcc -o ${CMAKE_BINARY_DIR}/txt2c ${CMAKE_SOURCE_DIR}/txt2c/main.c)

add_custom_target(c30log.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_c30log ${CMAKE_BINARY_DIR}/c30log.h ${CMAKE_SOURCE_DIR}/gelua/c30log.lua)
add_custom_target(md5.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_md5 ${CMAKE_BINARY_DIR}/md5.h ${CMAKE_SOURCE_DIR}/gelua/md5.lua)
add_custom_target(gelua.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_gelua ${CMAKE_BINARY_DIR}/gelua.h ${CMAKE_SOURCE_DIR}/gelua/ge.lua)
add_custom_target(Runnable.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_Runnable ${CMAKE_BINARY_DIR}/Runnable.h ${CMAKE_SOURCE_DIR}/gelua/Runnable.lua)
add_custom_target(ui.Button.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_uiButton ${CMAKE_BINARY_DIR}/ui.Button.h ${CMAKE_SOURCE_DIR}/gelua/ui.Button.lua)
add_custom_target(ui.InputText.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_uiInputText ${CMAKE_BINARY_DIR}/ui.InputText.h ${CMAKE_SOURCE_DIR}/gelua/ui.InputText.lua)
add_custom_target(ui.SpinBox.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_uiSpinBox ${CMAKE_BINARY_DIR}/ui.SpinBox.h ${CMAKE_SOURCE_DIR}/gelua/ui.SpinBox.lua)
add_custom_target(Page.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_Page ${CMAKE_BINARY_DIR}/Page.h ${CMAKE_SOURCE_DIR}/gelua/Page.lua)
add_custom_target(BigMenu.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_BigMenu ${CMAKE_BINARY_DIR}/BigMenu.h ${CMAKE_SOURCE_DIR}/gelua/BigMenu.lua)
add_custom_target(Menu.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_geMenu ${CMAKE_BINARY_DIR}/geMenu.h ${CMAKE_SOURCE_DIR}/gelua/Menu.lua)
add_custom_target(net.Socket.h COMMAND ${CMAKE_BINARY_DIR}/txt2c h_netSocket ${CMAKE_BINARY_DIR}/net.Socket.h ${CMAKE_SOURCE_DIR}/gelua/net.Socket.lua)

include_directories(${CMAKE_BINARY_DIR})




set(SOURCES src/main.c src/perlin.c)

if("${target}" MATCHES "ios")
        add_library(luage STATIC ${SOURCES})
        if("${target}" MATCHES "ios")
                set_xcode_property(luage GCC_GENERATE_DEBUGGING_SYMBOLS YES)
        endif()
else()
	add_executable(luage ${SOURCES})
endif()

add_dependencies(c30log.h txt2c)
add_dependencies(md5.h txt2c)
add_dependencies(gelua.h txt2c)
add_dependencies(Runnable.h txt2c)
add_dependencies(ui.Button.h txt2c)
add_dependencies(ui.InputText.h txt2c)
add_dependencies(ui.SpinBox.h txt2c)
add_dependencies(Page.h txt2c)
add_dependencies(BigMenu.h txt2c)
add_dependencies(Menu.h txt2c)
add_dependencies(net.Socket.h txt2c)

add_dependencies(luage c30log.h)
add_dependencies(luage md5.h)
add_dependencies(luage gelua.h)
add_dependencies(luage Runnable.h)
add_dependencies(luage ui.Button.h)
add_dependencies(luage ui.InputText.h)
add_dependencies(luage ui.SpinBox.h)
add_dependencies(luage Page.h)
add_dependencies(luage BigMenu.h)
add_dependencies(luage Menu.h)
add_dependencies(luage net.Socket.h)

set(LIBGE_LIB -lge)
if("${static}" MATCHES "1")
	set(LIBGE_LIB -lge_static)
endif()

if("${target}" MATCHES "ios")
	target_link_libraries(luage ${LIBGE_LIB})
	set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/..")
	install(TARGETS luage DESTINATION .)
elseif("${target}" MATCHES "win*")
	target_link_libraries(luage ${LIBGE_LIB} -llua_static -lfreetype -lpng -ljpeg -lz -lopengl32 -lwinmm -lm -pthread -lwsock32 -luser32)
elseif("${target}" MATCHES "mac*")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -framework Cocoa -framework OpenGL")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -framework Cocoa -framework OpenGL")
	set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -framework Cocoa -framework OpenGL")
	target_link_libraries(luage ${LIBGE_LIB} -llua -lfreetype -lpng -ljpeg -lz -lbz2)
elseif("${target}" MATCHES "linux*")
	target_link_libraries(luage ${LIBGE_LIB} -llua_static -lfreetype -lpng -ljpeg -lGL -lX11 -lz -lm -pthread)
endif()
